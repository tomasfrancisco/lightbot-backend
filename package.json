{
  "name": "lightbot-api",
  "version": "0.1.0",
  "description": "Lightbot backend",
  "main": "build/index.js",
  "license": "MIT",
  "private": true,
  "devDependencies": {
    "@types/dotenv": "6.1.0",
    "@types/graphql": "14.0.4",
    "@types/graphql-resolvers": "0.2.0",
    "@types/jest": "23.3.12",
    "@types/joi": "^14.0.1",
    "@types/koa": "2.0.48",
    "@types/koa-compress": "2.0.8",
    "@types/koa-helmet": "3.1.2",
    "@types/koa-router": "7.0.37",
    "@types/koa2-cors": "2.0.1",
    "@types/lodash": "4.14.119",
    "@types/mysql": "^2.15.5",
    "@types/node": "10.12.18",
    "@types/node-fetch": "^2.1.4",
    "@types/uuid": "3.4.4",
    "chalk": "2.4.2",
    "graphql-code-generator": "^0.15.2",
    "graphql-codegen-add": "^0.15.2",
    "graphql-codegen-time": "^0.15.2",
    "graphql-codegen-typescript-common": "^0.15.2",
    "graphql-codegen-typescript-resolvers": "0.15.2",
    "graphql-codegen-typescript-server": "^0.15.2",
    "jest": "23.6.0",
    "jest-extended": "0.11.0",
    "nodemon": "1.18.9",
    "npm-run-all": "4.1.5",
    "prettier": "1.15.3",
    "ts-config": "^20.9.0",
    "ts-jest": "23.10.5",
    "tslint": "5.12.0",
    "typescript": "3.2.2"
  },
  "dependencies": {
    "apiai": "^4.0.3",
    "archiver": "3.0.0",
    "commander": "2.19.0",
    "dataloader": "^1.4.0",
    "dialogflow": "0.7.0",
    "dotenv": "6.2.0",
    "graphql": "14.0.2",
    "graphql-resolvers": "0.3.2",
    "graphql-tools": "4.0.3",
    "inquirer": "6.2.1",
    "joi": "^14.3.1",
    "js-yaml": "3.12.1",
    "koa": "2.6.2",
    "koa-body": "4.0.6",
    "koa-compress": "3.0.0",
    "koa-graphql": "0.8.0",
    "koa-helmet": "4.0.0",
    "koa-router": "7.4.0",
    "koa2-cors": "2.0.6",
    "lightbot-ssot": "lightbasenl/lightbot-ssot#80d6a0d8",
    "lodash": "4.17.11",
    "mysql": "2.16.0",
    "node-fetch": "^2.3.0",
    "reflect-metadata": "0.1.12",
    "rimraf": "2.6.3",
    "tsconfig-paths": "3.7.0",
    "typeorm": "0.2.12",
    "uuid": "3.3.2"
  },
  "scripts": {
    "build": "tsc --diagnostics && yarn copy",
    "build:watch": "tsc --diagnostics --watch && yarn copy",
    "start": "node build/index.js",
    "start:watch": "nodemon --watch build/ --exec \"yarn start\"",
    "dev": "run-p build:watch start:watch",
    "dev:brk": "node --inspect-brk=3333 build/index.js",
    "dev:brk:watch": "nodemon --watch build/ --exec \"yarn dev:brk\"",
    "debug": "run-p build:watch dev:brk:watch",
    "copy": "node copyStaticFiles.js",
    "test": "NODE_ENV=test jest",
    "test:watch": "jest --watchAll",
    "lint": "yarn lint:ts && yarn lint:prettier",
    "lint:ts": "tslint --project ./tsconfig.json '**/*.{ts,tsx}'",
    "lint:prettier": "prettier --config ./.prettierrc --list-different \"./**/**/*.{ts,js,json,md}\"",
    "lint:fix": "yarn lint:ts --fix && yarn lint:prettier --write",
    "clean": "rm -rf ./build",
    "generate-gql-ts": "gql-gen",
    "docker:up": "docker-compose -f development/docker-compose.yml up -d",
    "docker:down": "docker-compose -f development/docker-compose.yml down",
    "migrate:dev": "cd src/database/migrations && node runMigration.js dev"
  },
  "scripts-info": {
    "build:*": "Run the typescript compiler with optional watch mode.",
    "start:*": "Run the builded js files with optional watch mode.",
    "dev": "Run build and start in parallel. Both are running in watch mode.",
    "debug:*": "Run the builded files with the inspector on, on port 3333, will break till debugger is attached.",
    "copy": "Copy static files to the output",
    "test:*": "Run Jest for testing, also supports watch mode.",
    "lint:*": "Run tslint that incorporates prettier. Also supports running 'fix'",
    "clean": "Remove Typescript compiler output.",
    "docker:*": "Start and stop docker containers (mysql and adminer)"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "ts-jest"
    },
    "bail": true,
    "testRegex": "/tests/.*(\\.)ts$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "json"
    ],
    "reporters": [
      "<rootDir>/tests/LogsWhenFailReporter.js"
    ],
    "moduleNameMapper": {
      "^~/(.*)$": "<rootDir>/src/$1"
    },
    "resetMocks": true,
    "setupTestFrameworkScriptFile": "jest-extended"
  }
}
